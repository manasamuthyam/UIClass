1) What are semantic elements?

Semantics is the study of the meanings of words and phrases in a language.

Semantic elements = elements with a meaning.A semantic element clearly describes its meaning to both the browser and the developer.

Examples of non-semantic elements: <div> and <span> - Tells nothing about its content.

Examples of semantic elements: <form>, <table>, and <article> - Clearly defines its content.

New Semantic Elements in HTML5
Many web sites contain HTML code like: <div id="nav"> <div class="header"> <div id="footer">
to indicate navigation, header, and footer.

HTML5 offers new semantic elements to define different parts of a web page:  

With HTML4, developers used their own id/class names to style elements: header, top, bottom, footer, menu, navigation, main, container, content, article, sidebar, topnav, etc.

This made it impossible for search engines to identify the correct web page content.

With the new HTML5 elements (<header> <footer> <nav> <section> <article>), this will become easier.
Tag	           Description
<article>		Defines an article
<aside>	   		Defines content aside from the page content
<details>	    Defines additional details that the user can view or hide
<figcaption>	Defines a caption for a <figure> element
<figure>	    Specifies self-contained content, like illustrations, diagrams, photos, code listings, etc.
<footer>	    Defines a footer for a document or section
<header>	    Specifies a header for a document or section
<main>	        Specifies the main content of a document
<mark>	        Defines marked/highlighted text
<nav>	        Defines navigation links
<section>	    Defines a section in a document
<summary>	    Defines a visible heading for a <details> element
<time>	        Defines a date/time

References:

http://www.w3schools.com/html/html5_semantic_elements.asp
http://www.hongkiat.com/blog/html-5-semantics/
https://codepen.io/mi-lee/post/an-overview-of-html5-semantics
http://html5doctor.com/lets-talk-about-semantics/
https://blogs.msdn.microsoft.com/jennifer/2011/08/01/html5-part-1-semantic-markup-and-page-layout/



2)Explain when to use a header, footer, article, nav, main, aside, section, ...? 

HTML5 <section> Element
The <section> element defines a section in a document.

A home page could normally be split into sections for introduction, content, and contact information.

Example
<section>
  <h1>WWF</h1>
  <p>The World Wide Fund for Nature (WWF) is....</p>
</section>

HTML5 <article> Element
The <article> element specifies independent, self-contained content.

An article should make sense on its own, and it should be possible to read it independently from the rest of the web site.

Examples of where an <article> element can be used:

Forum post
Blog post
Newspaper article

Example
<article>
  <h1>What Does WWF Do?</h1>
  <p>WWF's mission is to stop the degradation of our planet's natural environment,
  and build a future in which humans live in harmony with nature.</p>
</article>

Nesting <article> in <section> or Vice Versa?
The <article> element specifies independent, self-contained content.

The <section> element defines section in a document.

Can we use the definitions to decide how to nest those elements? No, we cannot!

So, on the Internet, you will find HTML pages with <section> elements containing <article> elements, and <article> elements containing <sections> elements.

You will also find pages with <section> elements containing <section> elements, and <article> elements containing <article> elements.

Example for a newspaper: The sport articles in the sport section, may have a technical section in each article.

HTML5 <header> Element
The <header> element specifies a header for a document or section.

The <header> element should be used as a container for introductory content.

You can have several <header> elements in one document.

The following example defines a header for an article:

Example
<article>
  <header>
    <h1>What Does WWF Do?</h1>
    <p>WWF's mission:</p>
  </header>
  <p>WWF's mission is to stop the degradation of our planet's natural environment,
  and build a future in which humans live in harmony with nature.</p>
</article>

HTML5 <footer> Element
The <footer> element specifies a footer for a document or section.

A <footer> element should contain information about its containing element.

A footer typically contains the author of the document, copyright information, links to terms of use, contact information, etc.

You may have several <footer> elements in one document.

Example
<footer>
  <p>Posted by: Hege Refsnes</p>
  <p>Contact information: <a href="mailto:someone@example.com">
  someone@example.com</a>.</p>
</footer>

HTML5 <nav> Element
The <nav> element defines a set of navigation links.

Notice that NOT all links of a document should be inside a <nav> element. The <nav> element is intended only for major block of navigation links.

Example
<nav>
  <a href="/html/">HTML</a> |
  <a href="/css/">CSS</a> |
  <a href="/js/">JavaScript</a> |
  <a href="/jquery/">jQuery</a>
</nav>

HTML5 <aside> Element
The <aside> element defines some content aside from the content it is placed in (like a sidebar).

The aside content should be related to the surrounding content.

Example
<p>My family and I visited The Epcot center this summer.</p>

<aside>
  <h4>Epcot Center</h4>
  <p>The Epcot Center is a theme park in Disney World, Florida.</p>
</aside>

HTML5 <figure> and <figcaption> Elements
The purpose of a figure caption is to add a visual explanation to an image.

In HTML5, an images and a caption can be grouped together in a <figure> element:

Example
<figure>
  <img src="pic_mountain.jpg" alt="The Pulpit Rock" width="304" height="228">
  <figcaption>Fig1. - The Pulpit Rock, Norway.</figcaption>
</figure>
Try it Yourself Â»

References:
http://www.w3schools.com/html/html5_semantic_elements.asp
http://www.hongkiat.com/blog/html-5-semantics/
https://codepen.io/mi-lee/post/an-overview-of-html5-semantics
http://html5doctor.com/lets-talk-about-semantics/
https://blogs.msdn.microsoft.com/jennifer/2011/08/01/html5-part-1-semantic-markup-and-page-layout/


3) html5 api's? and 4) Storage API, Application Cache, Web Workers, .....?



Locate the User's Position:
The HTML Geolocation API is used to get the geographical position of a user.

Since this can compromise privacy, the position is not available unless the user approves it.
The getCurrentPosition() method is used to return the user's position.

The example below returns the latitude and longitude of the user's position:

Example
<script>
var x = document.getElementById("demo");
function getLocation() {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(showPosition);
    } else {
        x.innerHTML = "Geolocation is not supported by this browser.";
    }
}
function showPosition(position) {
    x.innerHTML = "Latitude: " + position.coords.latitude + 
    "<br>Longitude: " + position.coords.longitude; 
}
</script>

The Geolocation object also has other interesting methods:

watchPosition() - Returns the current position of the user and continues to return updated position as the user moves (like the GPS in a car).
clearWatch() - Stops the watchPosition() method.

Drag and Drop
Drag and drop is a very common feature. It is when you "grab" an object and drag it to a different location.

In HTML5, drag and drop is part of the standard: Any element can be draggable.

With local storage, web applications can store data locally within the user's browser.

Before HTML5, application data had to be stored in cookies, included in every server request. Local storage is more secure, and large amounts of data can be stored locally, without affecting website performance.

Unlike cookies, the storage limit is far larger (at least 5MB) and information is never transferred to the server.

Local storage is per origin (per domain and protocol). All pages, from one origin, can store and access the same data.


HTML5 introduces application cache, which means that a web application is cached, and accessible without an internet connection.

Application cache gives an application three advantages:

Offline browsing - users can use the application when they're offline
Speed - cached resources load faster
Reduced server load - the browser will only download updated/changed resources from the server

Once a file is cached, the browser will continue to show the cached version, even if you change the file on the server. To ensure the browser updates the cache, you need to change the manifest file.

HTML5 Web Workers

A web worker is a JavaScript running in the background, without affecting the performance of the page.

A web worker is a JavaScript that runs in the background, independently of other scripts, without affecting the performance of the page. You can continue to do whatever you want: clicking, selecting things, etc., while the web worker runs in the background.

Check Web Worker Support
Before creating a web worker, check whether the user's browser supports it:

if (typeof(Worker) !== "undefined") {
    // Yes! Web worker support!
    // Some code.....
} else {
    // Sorry! No Web Worker support..
}


HTML5 Server-Sent Events

A server-sent event is when a web page automatically gets updates from a server.

This was also possible before, but the web page would have to ask if any updates were available. With server-sent events, the updates come automatically.

Examples: Facebook/Twitter updates, stock price updates, news feeds, sport results, etc.

Events		Description
onopen		When a connection to the server is opened
onmessage	When a message is received
onerror		When an error occurs

References:
http://www.w3schools.com/html/html5_serversentevents.asp
http://www.w3schools.com/graphics/google_maps_intro.asp
http://www.w3schools.com/html/html5_geolocation.asp
http://html5index.org/
https://www.sitepoint.com/10-html5-apis-worth-looking/


